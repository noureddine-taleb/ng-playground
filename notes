DI:
    lazy loaded modules:
        - if 'any' value is set to service providedIn each module will have its instance automatically
        - if 'root' is used, there will be one instance of the service in the app, unless requested by the module to have its own instance (providers in ngModule)
        - if null is used di will let you provide the service in module by module bases (the most optimal I guess)
        - if a module is loaded for the first time, it won't be loaded again even if user navigate to another module and come back, so module properties like services will keep old state

    eager modules(not verified!):
    - there is always a single instance of a service

    - Injectable has one effect by adding the service to the root injectable, if you want you can remove it and add the service manually to providers array of the appModule and it will work fine
    - angular services DI boils down into @Inject by the ng-compiler so if you declare a class as dep for a component like:
        - constructor(public myService: MyService) => constructor(@Inject(MyService) public myService)
        - and in providers array the services will turn into: [MyService] => [{provide: MyService, useClass: MyService}]